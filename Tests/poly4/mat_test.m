function mat_test( max_count , bw_vec )

%% Code Generated by BitSize - MatCodeGen

%% (c) 

global bw_out;
if ( nargin == 1 )
bw_vec = [ 0 0 0 0 0 0 0 0 0 0 0 0 ];
end;
no_of_inputs = 1;
input_sign = 'unsigned';
input_bw_int = 1;
input_bw_frac = 0;

rand_temp = gen_rand3( input_bw_int , input_bw_frac , input_sign , no_of_inputs , max_count );

k = 1;
for i=1:max_count

% Input Node  
x_r = rand_temp( k + 0);
x = rand_temp( k + 0);


% Const Edge 
c4_r = 0.056579662254422;
c4 = my_truncate( 0.056579662254422 , bw_vec( 1) );


% Const Edge 
c3_r = 0.220905073883621;
c3 = my_truncate( 0.220905073883621 , bw_vec( 2) );


% Const Edge 
c2_r = 0.467841810799485;
c2 = my_truncate( 0.467841810799485 , bw_vec( 3) );


% Const Edge 
c1_r = 0.9965418695737;
c1 = my_truncate( 0.9965418695737 , bw_vec( 4) );


% Const Edge 
c0_r = 6.06876718353324e-05;
c0 = my_truncate( 6.06876718353324e-05 , bw_vec( 5) );


% Mul Node  
dp0 = my_truncate( x * c4 , bw_vec( 6) );

dp0_r = x_r * c4_r;


% Add Node  
dp1 = my_truncate( dp0 + c3 , bw_vec( 7) );

dp1_r = dp0_r + c3_r;


% Mul Node  
dp2 = my_truncate( x * dp1 , bw_vec( 8) );

dp2_r = x_r * dp1_r;


% Add Node  
dp3 = my_truncate( dp2 + c2 , bw_vec( 9) );

dp3_r = dp2_r + c2_r;


% Mul Node  
dp4 = my_truncate( x * dp3 , bw_vec( 10) );

dp4_r = x_r * dp3_r;


% Add Node  
dp5 = my_truncate( dp4 + c1 , bw_vec( 11) );

dp5_r = dp4_r + c1_r;


% Mul Node  
dp6 = my_truncate( x * dp5 , bw_vec( 12) );

dp6_r = x_r * dp5_r;


% Add Node  
y = my_round(dp6 + c0 , bw_out( 1 ));

y_r = dp6_r + c0_r;


% Output Error calculation 
y_error( i ) = y_r - y;

y_r_vec(i) = y_r;

k = k + 1;

end;
output_frac = bw_out(1);
all_outputs = [ y_r_vec ];
all_errors = [ y_error ];
max_ulp_error = max(abs(all_errors))*2^output_frac;
avg_ulp_error = mean(abs(all_errors))*2^output_frac;
snr = get_snr(all_outputs, all_errors);
max_rel_error = max( (all_errors ./ all_outputs) * 100 );
avg_rel_error = mean( (all_errors ./ all_outputs) * 100 );
fprintf(1,' max ulp error = %f\n', max_ulp_error)
fprintf(1,' avg ulp error = %f\n', avg_ulp_error)
fprintf(1,' max rel error = %f\n', max_rel_error)
fprintf(1,' avg rel error = %f\n', avg_rel_error)
fprintf(1,' snr           = %f\n', snr)
function snr = get_snr(fx_real, fx_error)
for i=1:length(fx_real)
fx_real_sq(i) = fx_real(i)^2;
fx_error_sq(i) = fx_error(i)^2;
end;

snr = 10*log10(mean(fx_real_sq)/mean(fx_error_sq));

function fin_pr = my_round(u,q);
fin_pr = (2^-q)*round(u*2^q);


function fin_pr = my_truncate(u,q);
fin_pr = (2^-q)*floor(u*2^q);


%---------------------------------------------------------------
