
%.pwr: %.vcd
	@echo "*** BitSize Power Analysis ***"
	@$(PERL) $(BITSIZE_HOME)/plfiles/gen_xpwr_settings.pl
	xpwr -v -a $(^:.vcd=.ncd) $(^:.vcd=.pcf)  -s $^ -l 200000000  -t bs_xpwr_settings.tcl -wx
	@cat $@ | sed -ne '/^Power summary:/,/^Thermal/p'

%.vcd: %_timesim.vhd
	@echo "*** Netlist Level simulation ***"
#	@$(SIGNALGEN)/gen_sigs_vhdl.exe $(BWFILE) $(BS_DATA_FILE) 1000
	@perl $(BITSIZE_HOME)/plfiles/gen_modelsim.pl $(@:.vcd=)
	@$(PERL) $(BITSIZE_HOME)/plfiles/set_simfreq.pl $(@:.vcd=.twx) $(BS_TB_NAME).vhd $(OVR_SIM_PERIOD)
	echo 
	@vsim -c -quiet -do modsim_compile.do
	@vsim -c -quiet -do modsim.do

#ifeq ($(FAST_SIM),true)
#	vsim -c -quiet -do modsim.do
#else
#	vsim -c -quiet -do modsim_compile.do
#	vsim -c -quiet -do modsim.do
#endif

%.bit: %.ncd
	@echo "*** Generating Xilinx BIT file ****"
	bitgen $(BS_BITGEN_OPT) $^ $@

%_timesim.vhd:  %.ncd 
	@echo "*** Compiling BitSize Post Placement VHDL netlist ***"
	@netgen -intstyle ise -s 4 -pcf $*.pcf  $(NETGEN_OPTIONS) -sim $*.ncd $*_timesim.vhd

#@netgen -intstyle ise -s 4 -pcf $*.pcf -ngm $*_map.ngm $(NETGEN_OPTIONS) -sim $*.ncd $*_timesim.vhd

#%_timing.xml: %.ncd
#	trce -intstyle ise -u $(TRCE_OPTS) -a $^ -xml $@

#%.ncd: %.ngd
#	@echo "*** Compiling BitSize VHDL to HW - Setup 2/4***"
#	map -intstyle ise -o $@ $^ $(^:.ngd=.pcf) > $(^:.ngd=.pnr)
#	@echo "*** Compiling BitSize VHDL to HW - Setup 3/4***"
#	map -intstyle ise -o $(@:.ncd=_map.ncd) $^ $(^:.ngd=.pcf) >> $(^:.ngd=.pnr)
#	@echo "*** Compiling BitSize VHDL to HW - Setup 4/4***"
#	par -intstyle ise -ol std -t 1 -w $(@:.ncd=_map.ncd) $@ $(^:.ngd=.pcf) >> $(^:.ngd=.pnr)

#%.ngd: %.edf
#	@echo "*** Generating Xilinx Core files ***"
#	@$(PERL) $(BITSIZE_HOME)/plfiles/bs_postpass_vhdl.pl bitsize_test.vhd
#	@echo "*** Compiling BitSize VHDL to HW - Setup 1/4***"
#	ngdbuild -intstyle ise $^ $@ $(UCF_OPT)

%.ncd:  %.edf
	@echo "*** Xilinx Place and Route EDIF to NCD ***"
	@$(PERL) $(BITSIZE_HOME)/plfiles/gen_ucf_const.pl $(^:.edf=.ucf)
ifeq ($(MPPR_MODE),1)
	@xflow  -mppr $(BS_XFLOW_OPT_FILE) $^
else
	@xflow  -implement $(BS_XFLOW_OPT_FILE) $^ 
#	xflow  -implement ../bitsize.opt  $^ 
endif



%.edf: %_inst.vhd %_top.vhd
	@$(PERL) $(PLHOME)/gen_synplicity_prj2.pl bitsize_test_top $@ $^
#	synplify_pro synproj.prj -batch -launchmode
ifeq ($(GEN_XCORE),true)
	@echo "*** Generating Xilinx Core files ***"
	@$(PERL) $(BITSIZE_HOME)/plfiles/bs_postpass_vhdl.pl $<
endif

%_inst.vhd:
	@echo "*** Generating VHDL file using bitwidths from $(@:_inst.vhd=.dat) ***"
	@rm -f $(BS_DATA_EXCH)
#	@cp $(BWFILE) $(@:_inst.vhd=.dat)
	@./stream.exe -nobopt -vhdlgen -bwf $(@:_inst.vhd=.dat)
	mv bitsize_test.vhd $@

%_top.vhd:
	@echo "Generating Top Level VHDL file"
	@$(PERL) $(BITSIZE_HOME)/plfiles/gen_hw_top.pl $(@:_top.vhd=.dat) $@


#%.edf: bitsize_test.vhd
#	@perl $(BITSIZE_HOME)/plfiles/gen_synplicity_prj.pl $^ $@ bitsize_test
#	echo "Running Synplify Pro Synthesis"
#	synplify_pro synproj.prj -batch -launchmode
#ifeq ($(GEN_XCORE),true)
#	@echo "*** Generating Xilinx Core files ***"
#	@$(PERL) $(BITSIZE_HOME)/plfiles/bs_postpass_vhdl.pl bitsize_test.vhd
#endif

#bitsize_test.vhd: 
#	@echo "*** Generating VHDL file using bitwidths from $(BWFILE) ***"
#	@rm -f $(BS_DATA_EXCH)
#	@./stream.exe -nobopt -vhdlgen -bwf $(BWFILE)

#bitsize_test_top.edf:
#	@echo "Generating Top Level VHDL file"
#	@$(PERL) $(BITSIZE_HOME)/plfiles/gen_hw_top.pl $(BWFILE) bitsize_test_top.vhd
#	@echo "Running Synplify Pro Synthesis"
#	@synplify_pro synproj_hw.prj -batch -launchmode
#ifeq ($(GEN_XCORE),true)
#	@echo "*** Generating Xilinx Core files ***"
#	@$(PERL) $(BITSIZE_HOME)/plfiles/bs_postpass_vhdl.pl bitsize_test.vhd
#	@$(PERL) $(BITSIZE_HOME)/plfiles/bs_postpass_vhdl.pl xor_tree.vhd
#endif

clean_sim:
	rm -f *.vcd


clean_hw_all:
	rm -f bitsize_test.vhd *.edf *_timesim.vhd *.ncd *.ngd *.ngm *.vcd

.PRECIOUS: %.ncd %.ngd %_timesim.vhd %.edf %_inst.vhd %_top.vhd
